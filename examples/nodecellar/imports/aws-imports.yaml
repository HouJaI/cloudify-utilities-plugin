tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the Nodecellar application on an AWS cloud environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.4/plugin.yaml
  - imports/mongo-blueprint.yaml
  - imports/nodejs-blueprint.yaml
  - imports/nodecellar-blueprint.yaml

inputs:

  mongod_host_key_name:
    default: mongo

  mongod_host_private_key_path:
    default: ~/.ssh/mongo.pem

  nodejs_host_key_name:
    default: nodejs

  nodejs_host_private_key_path:
    default: ~/.ssh/nodejs.pem

  vpc_id:
    description: Your AWS Managers VPC.

  vpc_cidr_block:
    default: 172.16.0.0/16

  public_subnet_id:
    description: The public subnet in your VPC.

  public_subnet_cidr:
    default: 172.16.122.0/24

  public_subnet_availability_zone:
    default: { get_input: availability_zone }

  private_subnet_id:
    description: The private subnet in your VPC.

  private_subnet_cidr:
    default: 172.16.123.0/24

  private_subnet_availability_zone:
    default: { get_input: availability_zone }

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  availability_zone:
    default: us-east-1e

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

#   mongod_host_deployment_id:
#     type: string

dsl_definitions:

  aws_config: &aws_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  mongod_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      agent_config:
        install_method: remote
        port: 22
        user: ubuntu
        key: { get_property: [ mongod_host_key, private_key_path ] }
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        placement: { get_property: [ private_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: mongod_host_key
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongod_security_group
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: private_subnet

  mongod_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security Group for Mongo VMs
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: { get_input: vpc_cidr_block }
        - ip_protocol: tcp
          from_port: { get_property: [ mongod, port ] }
          to_port: { get_property: [ mongod, port ] }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 28017
          to_port: 28017
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  nodejs_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *aws_config
      agent_config:
        install_method: remote
        port: 22
        user: ubuntu
        key: { get_property: [ nodejs_host_key, private_key_path ] }
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        placement: { get_property: [ public_subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: nodejs_host_key
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: nodecellar_security_group
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: nodecellar_ip

  nodecellar_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security Group for Nodecellar VMs
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: { get_input: vpc_cidr_block }
        - ip_protocol: tcp
          from_port: { get_property: [ nodecellar, port ] }
          to_port: { get_property: [ nodecellar, port ] }
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      cidr_block: { get_input: public_subnet_cidr }
      availability_zone: { get_input: public_subnet_availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      cidr_block: { get_input: private_subnet_cidr }
      availability_zone: { get_input: private_subnet_availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: { get_input: vpc_cidr_block }

  mongod_host_key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      resource_id: { get_input: mongod_host_key_name }
      private_key_path: { get_input: mongod_host_private_key_path }


  nodejs_host_key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      resource_id: { get_input: nodejs_host_key_name }
      private_key_path: { get_input: nodejs_host_private_key_path }

  nodecellar_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

outputs:
  ip:
    description: Mongo Database Host IP
    value: { get_attribute: [ mongod_host, ip ] }
