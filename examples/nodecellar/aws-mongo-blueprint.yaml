tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the Nodecellar application on an AWS cloud environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.4/plugin.yaml
  - imports/aws-mongod-blueprint.yaml
  - imports/mongo-blueprint.yaml

inputs:

  mongod_host_key_name:
    default: mongo

  mongod_host_private_key_path:
    default: ~/.ssh/mongo.pem

  vpc_id:
    description: Your AWS Managers VPC.

  vpc_cidr_block:
    default: 172.16.0.0/16

  public_subnet_id:
    description: The public subnet in your VPC.

  public_subnet_cidr:
    default: 172.16.122.0/24

  public_subnet_availability_zone:
    default: { get_input: availability_zone }

  private_subnet_id:
    description: The private subnet in your VPC.

  private_subnet_cidr:
    default: 172.16.123.0/24

  private_subnet_availability_zone:
    default: { get_input: availability_zone }

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  availability_zone:
    default: us-east-1e

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  use_external_mongodb:
    default: false

dsl_definitions:

  aws_config: &aws_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      cidr_block: { get_input: public_subnet_cidr }
      availability_zone: { get_input: public_subnet_availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      cidr_block: { get_input: private_subnet_cidr }
      availability_zone: { get_input: private_subnet_availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: { get_input: vpc_cidr_block }
